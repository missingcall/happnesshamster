project.ext {
    //是否允许module单独编译
    isModuleDebug = false
    //单独调试module名
    moduleName = ""

    applicationId = libs.versions.applicationId.get()
    compileSdk = libs.versions.compileSdk.get().toInteger()
    minSdk = libs.versions.minSdk.get().toInteger()
    targetSdk = libs.versions.targetSdk.get().toInteger()
    versionCode = libs.versions.versionCode.get().toInteger()
    versionName = libs.versions.versionName.get()


    setAppDefaultConfig = { extension ->
        extension.apply plugin: 'com.android.application'
        extension.description "app"
        //公共的apply 主要是用于三方库
        extension.apply plugin: 'kotlin-android'
        extension.apply plugin: 'kotlin-parcelize'
        extension.apply plugin: 'kotlin-kapt'
        extension.apply plugin: 'com.didi.drouter'
        extension.apply plugin: 'com.tencent.vasdolly'   
        appImplementation = "app"
        //设置项目的android
        setAppAndroidConfig extension.android
        //设置项目的三方库依赖
        setDependencies extension.dependencies
        //多渠道设置
        extension.channel {
            //多渠道包的输出目录
            outputDir = new File(project.buildDir, "channel")
            //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}-${buildTime}
            apkNameFormat = 'kissspace_v${versionName}_${buildType}-${flavorName}'
            //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
            fastMode = false
            //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
            buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
            //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
            lowMemory = false
        }
        extension.rebuildChannel {
            channelFile = file("../flavor_channel.txt")
            baseApk = new File(project.rootDir, "/hamster_v1.1.10_release_0528-22-18-31-base.apk")
            outputDir = new File(project.buildDir, "rebuildChannel")
            fastMode = false
            lowMemory = false
        }

        //设置打包的apk
        android.applicationVariants.all { variant ->
            def date = new Date().format("MMdd-HH-mm-ss")
            variant.outputs.all {
                outputFileName = "kissspace_v${variant.versionName}_${variant.name}_${date}.apk"
            }
        }
    }

    setAppAndroidConfig = { extension ->
        extension.compileSdk project.ext.compileSdk
        extension.defaultConfig {
            applicationId project.ext.applicationId
            minSdk project.ext.minSdk
            targetSdk project.ext.targetSdk
            versionCode project.ext.versionCode
            versionName project.ext.versionName
            multiDexEnabled true
            extension.flavorDimensions "versionCode"
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            ndk {
                abiFilters "armeabi-v7a","arm64-v8a","x86","x86_64"
            }
        }
        extension.signingConfigs {
            debug {
                storeFile file("../musiyear.jks")
                storePassword "musiyear123456"
                keyAlias "musiyear"
                keyPassword "musiyear123456"
            }
            release {
                storeFile file("../musiyear.jks")
                storePassword "musiyear123456"
                keyAlias "musiyear"
                keyPassword "musiyear123456"
            }
        }

        extension.buildTypes {
            debug {
                resValue 'string', 'app_name', '电报仓鼠测试版'
//                applicationIdSuffix ".debug"
                minifyEnabled false
                debuggable true
//                shrinkResources true
//                proguardFiles extension.getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//                zipAlignEnabled true
                signingConfig extension.signingConfigs.debug
            }

            release {
                resValue 'string', 'app_name', '电报仓鼠'
                minifyEnabled false
                debuggable false
                shrinkResources false
//                proguardFiles extension.getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                zipAlignEnabled true
                signingConfig extension.signingConfigs.release
            }
        }
        extension.compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        extension.kotlinOptions {
            jvmTarget = '1.8'
        }
        extension.packagingOptions {
            pickFirst '**/*.so'
        }
        extension.buildFeatures.dataBinding = true
        extension.buildFeatures.viewBinding = true
    }

    //动态改变，用于单模块调试
    setAppOrLibDefaultConfig = {
        extension ->
            if (project.ext.isModuleDebug && project.ext.moduleName == project.name) {
                extension.apply plugin: 'com.android.application'
                extension.description "app"

            } else {
                extension.apply plugin: 'com.android.library'
                extension.description "lib"
            }
            extension.apply plugin: 'kotlin-android'
            extension.apply plugin: 'kotlin-parcelize'
            extension.apply plugin: 'kotlin-kapt'
            extension.apply plugin: 'kotlinx-serialization'
            appImplementation = project.name
            //配置模块的通配符
            setBuildTypes extension.android
            //配置渠道
            setProductFlavors extension.android
            //设置通用Android配置
            setAppOrLibAndroidConfig extension.android
            //设置通用依赖配置
            setDependencies extension.dependencies
    }




    setAppOrLibAndroidConfig = {
        extension ->
            extension.compileSdk project.ext.compileSdk
            extension.namespace "com.kissspace.$project.name"
            extension.defaultConfig {
                minSdk project.ext.minSdk
                targetSdk project.ext.targetSdk
                versionCode project.ext.versionCode
                versionName project.ext.versionName
                extension.flavorDimensions "versionCode"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            //使用的jdk版本
            extension.compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            extension.kotlinOptions {
                jvmTarget = '1.8'
            }
            extension.buildFeatures.dataBinding = true
            extension.buildFeatures.viewBinding = true
            //动态改变清单文件资源指向
            extension.sourceSets {
                main {
                    jniLibs.srcDirs = ['libs']
                    if (project.ext.isModuleDebug && project.ext.moduleName == project.name) {
                        manifest.srcFile 'src/main/manifest/AndroidManifest.xml'
                    } else {
                        manifest.srcFile 'src/main/AndroidManifest.xml'
                    }
                }
            }
    }

    setBuildTypes = {
        extension ->{
            switch (appImplementation){
                case "module_common":
                    extension.buildTypes{
                        release{

                            //趣玩
                            buildConfigField ("String","BASE_URL","\"https://qwapi.eyxzb.com\"")
                            buildConfigField ("String","H5_BASE_URl","\"https://qwweb.eyxzb.com\"")
//                            buildConfigField ("String","BASE_URL","\"https://api.qdborui.com\"")
//                            buildConfigField ("String","H5_BASE_URl","\"https://web.qdborui.com\"")

                            //电报仓鼠
                            buildConfigField ("String","BASE_URL","\"http://121.40.238.170:8201\"")
                            buildConfigField ("String","H5_BASE_URl","\"http://120.55.183.144\"")

                            //即构(老项目)
                            buildConfigField ("Long","ZEGO_APP_ID","253179363L")

                            //即构(新项目)
//                            buildConfigField ("Long","ZEGO_APP_ID","2141286342L")

                            //网易云信(老项目)
                            buildConfigField ("String","NETEASE_APP_KEY","\"bb85b563bd1cb3dc5cc634ab6443939d\"")
                            buildConfigField ("String","NETEASE_APP_Secret","\"a79449eb6799\"")

                            //网易云信(新项目)
//                            buildConfigField ("String","NETEASE_APP_KEY","\"afa8b840dcabf60ad0b40664d29cb53c\"")
//                            buildConfigField ("String","NETEASE_APP_Secret","\"a112aa02872d\"")

                            buildConfigField ("String","YiDun_APP_BusinessId","\"a527eb233d3b450abdea1f310b4bcbc0\"")
                            buildConfigField ("String","YiDun_Control_Id","\"YD00629611355548\"")
                            buildConfigField ("String","YiDun_Control_Key","\"57dd221df631497dbace7a3a196707eb\"")


                        }



                        debug{

                            //电报仓鼠
                            buildConfigField ("String","BASE_URL","\"http://121.40.238.170:8201\"")
                            buildConfigField ("String","H5_BASE_URl","\"http://120.55.183.144\"")
                            //即构
//                            buildConfigField ("Long","ZEGO_APP_ID","1832722667L")
                            //即构(新项目)
                            buildConfigField ("Long","ZEGO_APP_ID","2141286342L")

                            //网易云信
//                            buildConfigField ("String","NETEASE_APP_KEY","\"0c4738b037e8121de02f2d8d5d659819\"")
//                            buildConfigField ("String","NETEASE_APP_Secret","\"de8878c7ea5b\"")
                            //网易云信(新项目)
                            buildConfigField ("String","NETEASE_APP_KEY","\"afa8b840dcabf60ad0b40664d29cb53c\"")
                            buildConfigField ("String","NETEASE_APP_Secret","\"a112aa02872d\"")

                            buildConfigField ("String","YiDun_APP_BusinessId","\"a527eb233d3b450abdea1f310b4bcbc0\"")
                            buildConfigField ("String","YiDun_Control_Id","\"YD00021795252943\"")
                            buildConfigField ("String","YiDun_Control_Key","\"fd438f71b019491e98c94b91ab90237f\"")

                        }
                    }
                    break
            }
        }
    }

    setProductFlavors = {
        extension ->{
//            switch (appImplementation){
//                case "module_login":
//                case "module_common":
//                case "module_mine":
//                case "module_dynamic":
//                    extension.productFlavors{
//                        socialize_2098 {
//                        }
//                    }
//                    break
//            }
        }
    }

    setDependencies = {
        extension ->
            if (appImplementation == "module_common") {
                extension.compileOnly fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
            } else {
                extension.implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
            }
            if (appImplementation != "module_common" &&
                    appImplementation != "module_util" &&
                    appImplementation != "module_network"&&
                    appImplementation != "module_svga" && appImplementation != "module_ui") {
                extension.implementation extension.project(path: ':module_common')
            }

            extension.implementation 'androidx.test.ext:junit-ktx:1.1.5'
            switch (appImplementation) {
                case "app":
                    if (!project.ext.isModuleDebug) {
                        extension.implementation extension.project(path: ':module_login')
                        extension.implementation extension.project(path: ':module_message')
                        extension.implementation extension.project(path: ':module_mine')
                        extension.implementation extension.project(path: ':module_room')
                        extension.implementation extension.project(path: ':module_setting')
                        extension.implementation extension.project(path: ':module_webview')
                        extension.implementation extension.project(path: ':module_pay')
                        extension.implementation extension.project(path: ':module_dynamic')
                    }
                    break
                case "module_login":
                    extension.implementation extension.project(path: ':module_room')
                    break
                case "module_setting":
                    extension.implementation extension.project(path: ':module_dynamic')
                    break

                case "module_mine":
                    extension.implementation extension.project(path: ':module_dynamic')
                    break
                case "module_common":
                    extension.api extension.project(path: ':module_util')
                    extension.api extension.project(path: ':module_network')
                    extension.api extension.project(path: ':module_svga')
                    extension.api extension.project(path: ':module_ui')

                    extension.api (libs.bundles.androidx)
                    extension.api (libs.bundles.yunxin)
                    extension.api (libs.bundles.pictureselector)
                    extension.api (libs.bundles.umeng)
                    extension.api (libs.bundles.androidpicker)
                    extension.api (libs.bundles.glide)

                    extension.api (libs.bundles.uicommon)

                    extension.api (libs.mmkv.ktx)


                    extension.api (libs.wx.sdk)
                    extension.api (libs.viewbind.propertydelegate)

                    extension.api (libs.tencent.vasdolly)
                    extension.api (libs.android.oaid)
                    extension.api (libs.yidun.livedetect)

                    extension.api (libs.didi.router)

                    extension.api (libs.tencent.bugly)
                    extension.api (libs.tencent.libpag)
                    extension.api (libs.tencent.vap)


                    extension.kapt (libs.ui.glide.compiler)
                    extension.debugImplementation (libs.leakcanary)
                    extension.api 'org.apmem.tools:layouts:1.10@aar'
                    extension.api "com.alipay.sdk:alipaysdk-android:+@aar"
                    extension.compileOnly fileTree(dir: "../app/libs", include: ["*.aar"])
                    break
                case "module_network":
                    extension.compileOnly extension.project(path: ':module_util')
                    extension.api libs.bundles.net
                    break
                case "module_room":
                    extension.implementation extension.project(path: ':module_webview')
                    extension.implementation libs.mqtt
                    extension.implementation project(':SudMGPWrapper')
                    break
                case "module_webview":
                    extension.api "com.tencent.tbs:tbssdk:44286"
                    extension.implementation extension.project(path: ':module_pay')
                    break
                case "module_svga":
                    extension.implementation(libs.svga.glide.core)
                    extension.implementation (libs.svga.glide.okhttp3integration)
                    extension.kapt (libs.svga.glide.compiler)
                    extension.implementation (libs.svga.wire)
                    break
                case "module_util":
                    extension.api (libs.util.utilcodex)
                    extension.api (libs.util.softinputevent)
                    extension.implementation (libs.util.androidxcorektx)
                    extension.implementation (libs.util.androidxappcompat)
                    extension.implementation (libs.util.androidxmaterial)
                    extension.implementation (libs.util.startup)
                    extension.implementation (libs.util.lifecycleruntimektx)
                    extension.implementation (libs.util.lifecyclecommonjava8)
                    extension.implementation (libs.util.androidxfragmentktx)
                    extension.implementation (libs.util.okio)
                    extension.api (libs.util.coil)
//                    extension.api "io.coil-kt:coil:2.7.0"
//                    extension.api "io.coil-kt.coil3:coil:3.0.1"
                    extension.api (libs.util.kotlinxserializationjson)
                    extension.api (libs.util.permissionx)
                    break
                case "module_dynamic":
                    extension.implementation extension.project(path: ':module_webview')
                    //extension.implementation "com.github.CaesarShao:MusicSpectrumBar:1.1.2"
                    break
            }
    }
}


